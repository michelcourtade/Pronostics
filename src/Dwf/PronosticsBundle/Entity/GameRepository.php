<?php

namespace Dwf\PronosticsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Dwf;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{
    public function findAllOrderedByDate()
    {
        $qb = $this->createQueryBuilder('g')
        ->orderBy('g.date', 'ASC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllByEventOrderedByDate(Dwf\PronosticsBundle\Entity\Event $event)
    {
    	$qb = $this->createQueryBuilder('g')
    	->where('g.event = :event')
    	->setParameter('event', $event)
    	->orderBy('g.date', 'ASC');

    	$query = $qb->getQuery();
    	return $query->getResult();
    }

    public function findNextGame()
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.date > :date')
        ->setParameter('date', date("YmdHis"))
        ->orderBy('g.date', 'ASC')
        ;

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findNextGameAfter(Dwf\PronosticsBundle\Entity\Game $game)
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.id >= :id')
        ->setParameter('id', $game->getId())
        ->andWhere('g.id != :id')
        ->setParameter('id', $game->getId())
        ->andWhere('g.played = 0')
        ->andWhere('g.event = :event')
        ->setParameter('event', $game->getEvent())
        ->orderBy('g.id', 'ASC')
        ->setMaxResults(1)
        ;

        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    public function findNextGames(Dwf\PronosticsBundle\Entity\Event $event)
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.date > :date')
        ->setParameter('date', date("YmdHis", mktime(23,59,59,date("m"),date("d"), date("Y"))))
        ->andWhere('g.event = :event')
        ->setParameter('event', $event)
        ->andWhere('g.played = 0')
        ->orderBy('g.date', 'ASC')
        ->setMaxResults(3);
        ;

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllByType($type)
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.type = :type')
        ->setParameter('type', $type)
        ->orderBy('g.date', 'ASC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllByTypeAndEvent($type, Dwf\PronosticsBundle\Entity\Event $event)
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.type = :type')
        ->setParameter('type', $type)
        ->andWhere('g.event = :event')
        ->setParameter('event', $event)
        ->orderBy('g.date', 'ASC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findById($id)
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.id = :id')
        ->setParameter('id', $id);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findAllByEventAndDate(Dwf\PronosticsBundle\Entity\Event $event, $date)
    {
        $qb = $this->createQueryBuilder('g')
        ->where('g.event = :event')
        ->setParameter('event', $event)
        //->andWhere('DATE_FORMAT(g.date, \'%Y%m%d%H%i%s\') >= :date')
        ->andWhere('g.date >= :date')
        ->setParameter('date', $date . " 00:00:00")
        //->andWhere('DATE_FORMAT(g.date, \'%Y%m%d%H%i%s\') <= :date2')
        ->andWhere('g.date<= :date2')
        ->setParameter('date2', $date . " 23:59:59")
        ->orderBy('g.date', 'ASC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findLastGamePlayedByEvent(Dwf\PronosticsBundle\Entity\Event $event)
    {
    	$qb = $this->createQueryBuilder('g')
    	->where('g.event = :event')
    	->setParameter('event', $event)
    	->andWhere('g.played = 1')
    	->orderBy('g.date', 'DESC')
    	->setMaxResults(1);
    	;

    	$query = $qb->getQuery();

    	return $query->getResult();
    }

    public function findGamesLeftByEventAndGameType(Dwf\PronosticsBundle\Entity\Event $event, Dwf\PronosticsBundle\Entity\GameType $gameType)
    {
    	$qb = $this->createQueryBuilder('g')
    	->where('g.event = :event')
    	->setParameter('event', $event)
    	->andWhere('g.type = :type')
    	->setParameter('type', $gameType)
    	->andWhere('g.played = 0')
    	->orderBy('g.date', 'ASC')
    	;

    	$query = $qb->getQuery();
    	return $query->getResult();
    }

    /**
     * @param array $teamsArray
     * @param Event $event
     *
     * @return array
     */
    public function findAllTeamGamesOnEvent(array $teamsArray, Dwf\PronosticsBundle\Entity\Event $event)
    {
        $qb = $this->createQueryBuilder('g')
            ->where('g.event = :event')
            ->andWhere('g.team1 IN (:teams) OR g.team2 IN (:teams)' )
            ->setParameter('event', $event)
            ->setParameter('teams', $teamsArray)
        ;

        $query = $qb->getQuery();

        return $query->getResult();
    }
}
